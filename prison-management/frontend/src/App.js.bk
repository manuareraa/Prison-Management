import { useState, useEffect } from "react";
import "./App.css";
import axios from "axios";
import Web3 from "web3";
import { BrowserRouter, Routes, Route, useNavigate } from "react-router-dom";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

import Header from "./components/Header";
import Navbar from "./components/Navbar";
import Login from "./pages/Login";
import Register from "./pages/Register";
import Footer from "./components/Footer";
import Dashboard from "./pages/Dashboard";

function App() {
  const navigate = useNavigate();
  const [appState, setAppState] = useState({
    loggedIn: false,
    web3: null,
    account: "",
    chainId: "",
    maticBalance: "",
    isConnected: false,
    username: "",
  });

  const backendURL = "http://localhost:5000";

  const logInWithCreds = (username, password) => {
    console.log("<< Login >>", username, password);

    axios
      .post(backendURL + "/loginwithcreds", { username, password })
      .then((response) => {
        console.log(response.data);
        setAppState((prevState) => {
          return { ...prevState, loggedIn: true, username: username };
        });
        navigate("/dashboard");
      })
      .catch((error) => {
        console.error(error.response.data);
        if (error.response.status === 401) {
          toast.error("Invalid Credentials");
        } else {
          toast.error("Internal Server Error");
        }
      });
  };

  const logInWithWallet = async () => {
    console.log("<< Login with wallet >>");
    if (typeof window.ethereum !== "undefined") {
      try {
        await window.ethereum.request({ method: "eth_requestAccounts" });
        const web3 = new Web3(window.ethereum);
        setAppState((prevState) => {
          return { ...prevState, web3: web3 };
        });
        console.log("<< Web3 Object Received  >>");

        // Check if Polygon chain is added to Metamask
        window.ethereum
          .request({ method: "net_version" })
          .then((chainId) => {
            setAppState((prevState) => {
              return { ...prevState, chainId: chainId };
            });
            if (chainId !== "80001") {
              toast.info("Polygon Mumbai Chain not found. Adding it...");
              // Add Polygon Mumbai chain to Metamask if not added before
              window.ethereum.request({
                method: "wallet_addEthereumChain",
                params: [
                  {
                    chainId: "0x13881",
                    chainName: "Mumbai Testnet",
                    nativeCurrency: {
                      name: "MATIC",
                      symbol: "MATIC",
                      decimals: 18,
                    },
                    rpcUrls: ["https://rpc-mumbai.matic.today"],
                    blockExplorerUrls: ["https://mumbai.polygonscan.com"],
                  },
                ],
              });
            }
          })
          .catch((error) => {
            console.log(error);
            toast.error("Error connecting to Polygon Mumbai Chain");
          });

        setAppState((prevState) => {
          return { ...prevState, isConnected: true };
        });

        const accounts = await web3.eth.getAccounts();
        const balance = await web3.eth.getBalance(accounts[0]);
        const chainId = await web3.eth.getChainId();

        console.log("<< Account Received  >>", accounts[0]);
        console.log("<< Balance Received  >>", balance);
        console.log("<< Chain ID Received  >>", chainId);

        setAppState((prevState) => {
          return {
            ...prevState,
            account: accounts[0],
            chainId: chainId,
            maticBalance: balance,
          };
        });

        axios
          .post("/loginwithwallet", { wallet_address: accounts[0] })
          .then((response) => {
            console.log(response.data);
          })
          .catch((error) => {
            console.error(error.response.data);
          });

        // navigate("/dashboard");
      } catch (error) {
        console.error(error);
        toast.error("Error connecting to wallet");
      }
    } else {
      toast.error("Please install MetaMask to connect your wallet.");
    }
  };

  const logoutWithCreds = () => {
    console.log("<< Logout >>");
    setAppState((prevState) => {
      return {
        ...prevState,
        loggedIn: false,
        web3: null,
        account: "",
        chainId: "",
        maticBalance: "",
        isConnected: false,
        username: "",
      };
    });
    navigate("/");
  };

  const logoutWithWallet = () => {
    console.log("<< Logout >>");
    setAppState((prevState) => {
      return {
        ...prevState,
        loggedIn: false,
        web3: null,
        account: "",
        chainId: "",
        maticBalance: "",
        isConnected: false,
        username: "",
      };
    });
    navigate("/");
  };

  const registerWithWallet = async (username) => {
    console.log("<< Register with wallet >>", username);
    try {
      const response = await axios.post(backendURL + "/registerwithwallet", {
        username: username,
        wallet_address: appState.account,
      });
      console.log("Register with credentials: ", response.data); // This will log the response data returned by the server
      toast.success("Account Registered Successfully. Please Login Now.");
      navigate("/");
    } catch (error) {
      console.error(error.response.data);
      if (error.response.status === 410) toast.error("Wallet Already Exists");
      if (error.response.status === 411)
        toast.error("Wallet/Username combo already exists");
    }
  };

  const registerWithCreds = async (username, password) => {
    console.log("<< Register with credentials >>", username, password);
    try {
      const response = await axios.post(backendURL + "/registerwithcreds", {
        username: username,
        password: password,
      });
      console.log("Register with credentials: ", response.data); // This will log the response data returned by the server
      toast.success("Account Registered Successfully. Please Login Now.");
      navigate("/");
    } catch (error) {
      console.error(error.response.data);
      toast.error("Username Already Exists");
    }
  };

  const connectWalletForRegistration = async () => {
    console.log("<< Connect wallet for regsitration>>");
    if (typeof window.ethereum !== "undefined") {
      try {
        await window.ethereum.request({ method: "eth_requestAccounts" });
        const web3 = new Web3(window.ethereum);

        // Check if Polygon chain is added to Metamask
        window.ethereum
          .request({ method: "net_version" })
          .then((chainId) => {
            setAppState((prevState) => {
              return { ...prevState, chainId: chainId };
            });
            if (chainId !== "80001") {
              toast.info("Polygon Mumbai Chain not found. Adding it...");
              // Add Polygon Mumbai chain to Metamask if not added before
              window.ethereum.request({
                method: "wallet_addEthereumChain",
                params: [
                  {
                    chainId: "0x13881",
                    chainName: "Mumbai Testnet",
                    nativeCurrency: {
                      name: "MATIC",
                      symbol: "MATIC",
                      decimals: 18,
                    },
                    rpcUrls: ["https://rpc-mumbai.matic.today"],
                    blockExplorerUrls: ["https://mumbai.polygonscan.com"],
                  },
                ],
              });
            }
          })
          .catch((error) => {
            console.log(error);
            toast.error("Error connecting to Polygon Mumbai Chain");
          });

        const accounts = await web3.eth.getAccounts();
        const balance = await web3.eth.getBalance(accounts[0]);
        const chainId = await web3.eth.getChainId();

        console.log("<< Account Received  >>", accounts[0]);
        console.log("<< Balance Received  >>", balance);
        console.log("<< Chain ID Received  >>", chainId);

        setAppState((prevState) => {
          return {
            ...prevState,
            account: accounts[0],
            chainId: chainId,
            maticBalance: balance,
          };
        });

        toast.info("Wallet connected successfully");
      } catch (error) {
        console.error(error);
        toast.error("Error connecting to wallet");
      }
    } else {
      toast.error("Please install MetaMask to connect your wallet.");
    }
  };

  const sampleAxiosFunctions = () => {
    axios
      .get("https://example.com/api", { params: { id: 123 } })
      .then((response) => console.log(response.data))
      .catch((error) => console.log(error));

    axios
      .get("https://example.com/api")
      .then((response) => console.log(response.data))
      .catch((error) => console.log(error));

    axios
      .post("https://example.com/api", { name: "John", age: 30 })
      .then((response) => console.log(response.data))
      .catch((error) => console.log(error));

    axios
      .post("https://example.com/api")
      .then((response) => console.log(response.data))
      .catch((error) => console.log(error));
  };

  useEffect(() => {
    if (appState.account !== "") {
      // Detect if chain changes from Polygon Mumbai
      window.ethereum.on("chainChanged", (newChainId) => {
        toast.error("Chain changed! Please log in Again");
        navigate("/");
        setAppState((prevState) => {
          return {
            ...prevState,
            account: "",
            chainId: "",
            maticBalance: "",
            isConnected: false,
          };
        });
      });

      // Detect if account changes
      window.ethereum.on("accountsChanged", (newAccounts) => {
        toast.error("Account changed! Please log in Again");
      });
    }
  }, [appState.account]);

  return (
    <div className="h-screen">
      <ToastContainer
        position="top-right"
        autoClose={5000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="colored"
      />

      <Header appState={appState} />
      <Navbar
        appState={appState}
        logoutWithCreds={logoutWithCreds}
        logoutWithWallet={logoutWithWallet}
      />
      <Footer />
      <Routes>
        <Route
          path="/"
          element={
            <Login
              logInWithCreds={logInWithCreds}
              logInWithWallet={logInWithWallet}
            />
          }
        />
        <Route
          path="/register"
          element={
            <Register
              appState={appState}
              logInWithWallet={logInWithWallet}
              registerWithWallet={registerWithWallet}
              registerWithCreds={registerWithCreds}
              connectWalletForRegistration={connectWalletForRegistration}
            />
          }
        />
        <Route path="/dashboard" element={<Dashboard />} />
      </Routes>
    </div>
  );
}

export default App;
